(function(){

  window.addEventListener("scroll", e => {

    var offsetY = window.pageYOffset || window.scrollY;
    if( app_header ) {
      offsetY > app_header.getBoundingClientRect().height
      ?
        app_header.classList.add('floatting')
      :
        app_header.classList.remove('floatting')
      ;
    }

  });

  document.addEventListener('mouseover', e => {
    if( !e.isTrusted || typeof e.target.tagName == "undefined" || e.target.tagName != "IMG" ) return;

    e.target.draggable = false;
  });

}());


async function addToCart(sender) {
  sender.initialText = sender.innerHTML;
  sender.innerHTML = "<span><i class='far fa-spinner fa-spin'></i></span>";
  sender.disable = true;

  let quantitySelector = sender.parentNode.parentNode.querySelector(".input-numerator input");
  var buffer = {
    id: sender.dataset.id,
    quantity: parseFloat(quantitySelector.value)
  }


  Cart.articles.add(buffer);

  setTimeout(() => {
    sender.innerHTML = "<span>Ajouté</span>";
    quantitySelector.value = quantitySelector.min;
    setTimeout(() => {
      sender.innerHTML = sender.initialText;
      sender.disable = false;
    }, 600);
  }, 400);
}

function fullScreenImg(img) {

  var template = `
    <div class="img-fullscreen" data-overflow-component>
      <section>
        <button type="button" data-ash-tooltip="Zoom (-)" data-ash-tooltip-closingType="ontargetleave" data-ash-tooltip-styles="blue small bold">
          <i class="fal fa-search-minus"></i>
        </button>
        <button type="button" data-ash-tooltip="Zoom (+)" data-ash-tooltip-closingType="ontargetleave" data-ash-tooltip-styles="blue small bold">
          <i class="fal fa-search-plus"></i>
        </button>
        <button type="button" data-ash-tooltip="Quitter" data-ash-tooltip-closingType="ontargetleave" data-ash-tooltip-styles="red small bold">
          <i class="fal fa-times"></i>
        </button>
      </section>
      ${img.outerHTML}
    </div>
  `;

  const wrapper = document.createElement("div");
  wrapper.innerHTML = template;

  const render = wrapper.firstElementChild;
  const previewImg = render.querySelector("img");
  previewImg.draggable = false;

  const self = {
    img: previewImg,
    currentZoom: 1,
    maxZoom: 3,
    minZoom: .75,

    set zoom(val) {
      var nextVal = this.currentZoom + val;
      if( nextVal < this.minZoom || nextVal > this.maxZoom ) return this.currentZoom;
      this.currentZoom += val;

      this.img.style.setProperty("transform", `scale(${this.currentZoom})`);

      return this.currentZoom;
    }
  }

  const btns = render.querySelectorAll("section > button");
  btns[0].onclick = function() {
    self.zoom = -.25;

    btns.forEach(_ => _.disable = false);

    if( self.currentZoom <= self.minZoom ) this.disable = true;
  }

  btns[1].onclick = function() {
    self.zoom = +.25;

    btns.forEach(_ => _.disable = false);

    if( self.currentZoom >= self.maxZoom ) this.disable = true;
  }

  btns[2].onclick = function() {
    render.remove();
    overflowComponentUpdate();
  }

  const slider = {
    sliding: false,
    startCoords: {x: undefined, y: undefined},
    startOffsets: {x: undefined, y: undefined}
  }

  self.img.addEventListener("mousedown touchstart", e => {
    if( !e.changedTouches || !e.changedTouches[0] ) e.changedTouches = [{clientX: e.clientX, clientY: e.clientY}];

    slider.sliding = true;
    render.classList.add("_sliding");

    slider.startCoords = {
      x: e.changedTouches[0].clientX,
      y: e.changedTouches[0].clientY
    }

    slider.startOffsets = {
      x: previewImg.getBoundingClientRect().left,
      y: previewImg.getBoundingClientRect().top
    }

  });

  window.addEventListener("mousemove touchmove", e => {
    if( !e.changedTouches || !e.changedTouches[0] ) e.changedTouches = [{clientX: e.clientX, clientY: e.clientY}];
    if( !slider.sliding ) return;

    const movingCoords = {
      x: e.changedTouches[0].clientX - slider.startCoords.x,
      y: e.changedTouches[0].clientY - slider.startCoords.y
    };

    previewImg.style.setProperty("transform", `translateX(${movingCoords.x}px) translateY(${movingCoords.y}px) scale(${self.currentZoom})`);
  });

  window.addEventListener("mouseup touchend", e => {
    if( !e.changedTouches || !e.changedTouches[0] ) e.changedTouches = [{clientX: e.clientX, clientY: e.clientY}];
    slider.sliding = false;
    render.classList.remove("_sliding");
    previewImg.style.setProperty("transform", `scale(${self.currentZoom})`);
  });

  app_main.appendChild(render);

  overflowComponentUpdate();
  return img;
}

function listArticles(list, to) {
  const fragement = document.createDocumentFragment();
  list.articles.map(_ => {
    `<div class="product-wrapper">
      <div class="product-card" data-promotion="0" tabindex="-1">
        <section class="illustration">
          <img src="${_.illustrations[0]}" alt="illustration">
        </section>
        <section class="informations">
          <label class="ak-name">
            <a href="${location.rootHref}product/${_.id}">
              ${_.title}
            </a>
          </label>
          <span class="ak-qty-type">
            ${_.quantity} ${_.unit} | ${_.type}
          </span>
          <span class="ak-price">
            ${
              _.price != _.secondaryPrice ? `<span class="basic">${parseFloat(_.price).format(2, ",")} Dhs</span>
              ●` : ""
            }
            <span>${parseFloat(_.secondaryPrice).format(2, ",")} Dhs</span>
          </span>
        </section>
        <section class="actions">
          <div class="input-numerator">
            <button type="button" data-operator="-"><i class="far fa-minus"></i></button>
            <input type="text" value="1" min="1" max="10" readonly>
            <button type="button" data-operator="+"><i class="far fa-plus"></i></button>
          </div>
          <br>
          <a onclick="${_.soldout ? "" : "addToCart(this)"}" ${_.soldout ? "disabled" : ""} data-id="${_.id}" class="ak-cuteBtn ak-blue" role="button" tabindex="-1">
            <span>
              ${_.soldout ? "Epuisé" : "Ajouter au panier"}
            </span>
          </a>
          <a href="${location.rootHref}product/${_.id}/${_.title.toString().replaceAll(" ", "-")}" class="ak-cuteBtn ak-orange ak-alphaModed" role="button" tabindex="-1" style="margin-top: .25rem">
            <span>
              Voir le produit
            </span>
            <i class="far fa-external-link"></i>
          </a>
        </section>
      </div>
    </div>
    `
    .toTemplate()
    .appendTo(fragement);
  });

  to.innerHTML = "";
  to.appendChild(fragement);
  return fragement;
}


async function Wish(id) {
  let e = window.event;
  const btn = e.target;

  btn.initialText = btn.innerHTML;
  btn.innerHTML = '<span><i class="far fa-spinner fa-spin"></i></span>';
  btn.disable = true;

  post({
    url: `${location.rootHref}submit/wish_toggle`,
    data: {
      article: id
    },
    fail: err => {
      console.error(err);
      btn.innerHTML = btn.initialText;
      btn.disable = false;
    },
    done: promise => {
      if( promise.response.validated ) {
        btn.innerHTML = '<span><i class="far fa-check"></i></span>';
        setTimeout(() => {
          btn.innerHTML = btn.initialText;
          btn.disable = false;
        }, 1500);
      }
      else {
        alert(promise.response.response);
        btn.innerHTML = btn.initialText;
        btn.disable = false;
      }
    }
  });
}

async function deleteNotification(id) {
  let e = window.event;
  const btn = e.target;

  let section = btn.parentNode;
  while( section != document.body && !section.dataset.notificationId) section = section.parentNode;

  section.style.display = "none";

  post({
    url: `${location.rootHref}submit/delete_notification`,
    data: {
      notification: id
    },
    fail: err => {
      console.error(err);
      section.removeAttribute("style");
    },
    done: promise => {
      if( promise.response.validated )
        section.remove();
      else {
        alert(promise.response.response);
        section.removeAttribute("style");
      }
    }
  });
}


(function(){
  if( typeof clientNotificationsBtn == "undefined" || !clientNotificationsBtn ) return;
  clientNotificationsBtn.onclick = function() {
    window.location.href = `${location.rootHref}profile/notifications`;
  }
}());
